{
    "portfolio": {
        "intro": {
            "_avatar": "/images/headshot.jpg",
            "_heading": "Julian Moyse",
            "_subheading": "Full Stack Developer"
        },
        "about": "\n    My name is Julian Moyse I'm a Full Stack Software Developer based out of the Washington DC area. I create full featured, user-focused applications on the web.\n    I am a detail-oriented developer with a passion for writing clean, efficient and well maintained code. I pride myself in staying up to date with the latest technology\n    and software design principles.\n    Interested in everything with computers, the internet and technology.\n   ",
        "contacts": {
            "contact": [
                {
                    "_name": "github.com/jmoyse",
                    "_link": "github.com/jmoyse",
                    "_icon": "github"
                },
                {
                    "_name": "facebook.com/julianmoyse",
                    "_link": "facebook.com/julianmoyse",
                    "_icon": "facebook"
                },
                {
                    "_name": "@julianmoyse",
                    "_link": "twitter.com/julianmoyse",
                    "_icon": "twitter"
                },
                {
                    "_name": "Google+",
                    "_link": "google.com/something",
                    "_icon": "googleplus"
                },
                {
                    "_name": "linkedin.com/in/julianmoyse",
                    "_link": "linkedin.com/in/julianmoyse",
                    "_icon": "linkedin"
                },
                {
                    "_name": "hello@julianmoyse.com",
                    "_link": "mailto:hello@julianmoyse.com",
                    "_icon": "email"
                }
            ]
        },
        "projects": {
            "project": [
                {
                    "description": "\n               Progress Web App (PWA) online multiple game. A modern twist on classic board games like Scrabble and Boggle. Rounds are played in real-time vs the entire lobby with the objective to get the highest score before time runs out. Points are assigned from predefined tile values along with randomized bonus tiles.  Support for hundreds of concurrent players with chat, score history and profiles. Cleanly written using a number of different modern languages and APIs. Broken up in a number of smaller projects.  Playable as a PWA phone application or from any web browser by clicking the play button below. Source code available upon request.\n           ",
                    "techs": {
                        "tech": [
                            {
                                "_name": "Typescript",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Javascript",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "React",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Redux",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Webpack",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Docker",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Material UI",
                                "_icon": "typescript"
                            }
                        ]
                    },
                    "_name": "Word Coaster",
                    "_url": "https://wordcoaster.julianmoyse.com/play/",
                    "_screenshot": "wordcoaster1.gif",
                    "_github": ""
                },
                {
                    "description": "\n                Implementation of the popular tile game 2048. The objective of the game is reach the highest score by merging tiles of the same type. The game gets increasingly harder as additional types of tiles are added onto the board. The application was written as a lightweight Windows application written in C# and the .NET runtime. Designed to be a feature complete version of the original game. Requires Windows and .NET\n\n           ",
                    "techs": {
                        "tech": [
                            {
                                "_name": "C#",
                                "_icon": "csharp"
                            },
                            {
                                "_name": ".NET Runtime",
                                "_icon": "dotnet"
                            }
                        ]
                    },
                    "_name": "2048",
                    "_url": "",
                    "_screenshot": "2048.png",
                    "_github": "https://github.com/jmoyse/2048-csharp"
                },
                {
                    "description": "\n               C++ implementation of the Quadtree Data Structure used in the querying and storing of 2-D shapes and points. Supports efficient location, range queries and storage. Designed primarily as a console application, but includes optional GUI for visualizing successively layers in the tree. Written for CMSC420 (Data Structures). Binaries and source code on Github.\n           ",
                    "techs": {
                        "tech": [
                            {
                                "_name": "C++",
                                "_icon": "cplusplus"
                            },
                            {
                                "_name": "Linux",
                                "_icon": "linux"
                            }
                        ]
                    },
                    "_name": "Loose Quadtree Data Structure",
                    "_url": "",
                    "_screenshot": "showquad.png",
                    "_github": "https://github.com/jmoyse/loosequadtree"
                },
                {
                    "description": "\n              Node.JS microservice used to solve a boggle board of a given size. Used as a supportive sub application to the Word Coaster game. Designed to take a parameterized game string and return a board solution. Efficiently solves a board using a Trie and depth-first traversal of the gameboard. Returns results in JSON.\n           ",
                    "techs": {
                        "tech": [
                            {
                                "_name": "Node.js",
                                "_icon": "cplusplus"
                            },
                            {
                                "_name": "Express",
                                "_icon": "csharp"
                            },
                            {
                                "_name": "Typescript",
                                "_icon": "csharp"
                            },
                            {
                                "_name": "JSON",
                                "_icon": "WebSockets"
                            },
                            {
                                "_name": "Docker",
                                "_icon": "Docker"
                            }
                        ]
                    },
                    "_name": "Boggle Micro-service solver ",
                    "_url": "https://julianmoyse.com:3000/solver?tiles=RILLEPVPIEUOOONU",
                    "_screenshot": "gameserver1.png",
                    "_github": "https://github.com/jmoyse/boggle-solver-microservice"
                },
                {
                    "description": "\n              Small lightweight bittorrent client. Implements a subset of the bt protocol. Includes tracker connection, handshake and peer uploading/downloading. Implements a packet queue to handle fast connections between peers. Implemented in Ruby and using raw sockets.  Written for CMSC417.\n           ",
                    "techs": {
                        "tech": [
                            {
                                "_name": "Ruby",
                                "_icon": "ruby"
                            },
                            {
                                "_name": "Sockets",
                                "_icon": "sockets"
                            }
                        ]
                    },
                    "_name": "Bittorrent Client",
                    "_url": "",
                    "_screenshot": "btclient.png",
                    "_github": "https://github.com/jmoyse/btclient-ruby",
                    "__text": ">\n           \n\n           \n\n       "
                },
                {
                    "description": "\n           Music player application written to match the basic look and feel of standard three-panel MP3 player applications. Functionality similar to XMMS, Foobar200 and WinAmp. The application is designed to be lightweight with a small memory.\n\n           Written in Mono and C#, allowing the application to run on variety of different systems provided the system has access to GTK, GTK-Sharp and LibGstreamer. Supports adding songs from local folders, creating playlists and standard playing functions.\n\n           Runs of Linux, Unix, Mac OSX and Windows\n\n           ",
                    "techs": {
                        "tech": [
                            {
                                "_name": "Mono",
                                "_icon": ""
                            },
                            {
                                "_name": "C#",
                                "_icon": ""
                            },
                            {
                                "_name": "GTK",
                                "_icon": ""
                            },
                            {
                                "_name": "Lib G-Streamer",
                                "_icon": ""
                            },
                            {
                                "_name": "Linux",
                                "_icon": ""
                            }
                        ],
                        "__text": "\n               \n\n               \n\n               \n\n               \n\n               \n>\n           "
                    },
                    "_name": "XMMS-like MP3 Player",
                    "_url": "",
                    "_screenshot": "mp3player-screenshot.png",
                    "_github": "https://github.com/jmoyse/mono-mp3player"
                },
                {
                    "description": "\n                On-screen keyboard for the Gnome desktop environment. Designed as a lightweight and small keyboard for pen enabled tablets. Written in Mono, C#, GTK and GTK-Sharp.\n           ",
                    "techs": {
                        "tech": [
                            {
                                "_name": "Mono",
                                "_icon": ""
                            },
                            {
                                "_name": "C#",
                                "_icon": ""
                            },
                            {
                                "_name": "GTK",
                                "_icon": ""
                            },
                            {
                                "_name": "Linux",
                                "_icon": ""
                            }
                        ],
                        "__text": "\n               \n\n               \n\n               \n\n               \n>\n           "
                    },
                    "_name": "Tablet Touch Keyboard",
                    "_url": "",
                    "_screenshot": "keyboard-small.png",
                    "_github": ""
                }
            ]
        },
        "education": {
            "school": [
                {
                    "_name": "University of Maryland",
                    "_degree": "BS. Computer Science",
                    "_location": "College Park, MD"
                },
                {
                    "_name": "Howard Community College",
                    "_degree": "AS. Mathematics",
                    "_location": "Columbia, MD"
                },
                {
                    "_name": "Howard Community College",
                    "_degree": "AS. Computer Science",
                    "_location": "Columbia, MD"
                }
            ]
        },
        "skills": {
            "skill": [
                {
                    "_name": "C#/.NET",
                    "_icon": "dotnet.png",
                    "_score": "90"
                },
                {
                    "_name": "Java",
                    "_icon": "java.png",
                    "_score": "60"
                },
                {
                    "_name": "C++",
                    "_icon": "cplusplus.png",
                    "_score": "60"
                },
                {
                    "_name": "Javascript",
                    "_icon": "javascript.png",
                    "_score": "90"
                },
                {
                    "_name": "Typescript",
                    "_icon": "typescript.png",
                    "_score": "90"
                },
                {
                    "_name": "React",
                    "_icon": "react.png",
                    "_score": "80"
                },
                {
                    "_name": "Redux",
                    "_icon": "redux.png",
                    "_score": "80"
                },
                {
                    "_name": "Node.JS",
                    "_icon": "nodejs.png",
                    "_score": "90"
                },
                {
                    "_name": "Python",
                    "_icon": "python.png",
                    "_score": "65"
                },
                {
                    "_name": "PostreSQL",
                    "_icon": "postgres.png",
                    "_score": "92"
                },
                {
                    "_name": "MongoDB",
                    "_icon": "mongodb.png",
                    "_score": "80"
                },
                {
                    "_name": "MySQL",
                    "_icon": "mysql.png",
                    "_score": "85"
                }
            ]
        }
    }
}