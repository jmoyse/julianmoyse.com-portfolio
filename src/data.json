{
    "portfolio": {
        "intro": {
            "_avatar": "/images/headshot.jpg",
            "_heading": "Julian Moyse",
            "_subheading": "Full Stack Developer"
        },
        "about": "\n   F\n   I am a Software Developer and Computer Scientist. I graduated from the University of Maryland with a Bachelors in Computer Science. I am a detail-oriented developer with a passion for writing clean, efficient and well maintained code. I pride myself in staying up to date with the latest technology and software design principles.\n\n   Currently working as a freelance web developer, but always open to new opportunities.\n   Lifelong geek, nerd and techie.\n   Feel free to shoot me a message\n   ",
        "contacts": {
            "contact": [{
                    "_name": "github.com/jmoyse",
                    "_link": "github.com/jmoyse",
                    "_icon": "github"
                },
                {
                    "_name": "facebook.com/julianmoyse",
                    "_link": "facebook.com/julianmoyse",
                    "_icon": "facebook"
                },
                {
                    "_name": "@julianmoyse",
                    "_link": "twitter.com/julianmoyse",
                    "_icon": "twitter"
                },
                {
                    "_name": "Google+",
                    "_link": "google.com/something",
                    "_icon": "googleplus"
                },
                {
                    "_name": "linkedin.com/in/julianmoyse",
                    "_link": "linkedin.com/in/julianmoyse",
                    "_icon": "linkedin"
                },
                {
                    "_name": "hello@julianmoyse.com",
                    "_link": "mailto:hello@julianmoyse.com",
                    "_icon": "email"
                }
            ]
        },
        "projects": {
            "project": [{
                    "description": "\n               Mobile real time multiplayer game. A twist on classic board games like Scrabble and Boggle. Games are played in real-time vs the entire lobby. The winner is the player who can score the most points in the lobby before the 2 minute timer is up.  Support for hundreds of concurrent players with chat, score history and profiles. Cleanly written using a number of different modern languages and APIs. Broken up in a number of smaller projects.  Selected source code available upon request.\n           ",
                    "techs": {
                        "tech": [{
                                "_name": "Typescript",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Javascript",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "React",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Redux",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Webpack",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Docker",
                                "_icon": "typescript"
                            },
                            {
                                "_name": "Material UI",
                                "_icon": "typescript"
                            }
                        ]
                    },
                    "_name": "Word Coaster",
                    "_url": "https://wordcoaster.julianmoyse.com/play/",
                    "_screenshot": "wordcoaster1.gif",
                    "_github": ""
                },
                {
                    "description": "\n               .NET version of the 2048 tile game\n           ",
                    "techs": {
                        "tech": [{
                                "_name": "C#",
                                "_icon": "csharp"
                            },
                            {
                                "_name": ".NET Runtime",
                                "_icon": "dotnet"
                            }
                        ]
                    },
                    "_name": "2048",
                    "_url": "",
                    "_screenshot": "2048.png",
                    "_github": "https://github.com/jmoyse/2048-csharp"
                },
                {
                    "description": "\n               Implementation of the the Quadtree Data Structure.\n               C++ implementation of the Data Structure used for efficient querying of 2-D objects. Supports efficient range queries and storage. Written for CMSC420 (Data Structures).\n           ",
                    "techs": {
                        "tech": [{
                                "_name": "C++",
                                "_icon": "cplusplus"
                            },
                            {
                                "_name": "Linux",
                                "_icon": "linux"
                            }
                        ]
                    },
                    "_name": "Loose Quadtree Data Structure",
                    "_url": "",
                    "_screenshot": "showquad.png",
                    "_github": "https://github.com/jmoyse/loosequadtree"
                },
                {
                    "description": "\n              Micro-service that efficiently solves a board of any given size using a Trie and depth-first traversal of the gameboard. Returns results in JSON.\n           ",
                    "techs": {
                        "tech": [{
                                "_name": "Node.js",
                                "_icon": "cplusplus"
                            },
                            {
                                "_name": "Express",
                                "_icon": "csharp"
                            },
                            {
                                "_name": "Typescript",
                                "_icon": "csharp"
                            },
                            {
                                "_name": "JSON",
                                "_icon": "WebSockets"
                            },
                            {
                                "_name": "Docker",
                                "_icon": "Docker"
                            }
                        ]
                    },
                    "_name": "Word Coaster Server Back-end",
                    "_url": "https://julianmoyse.com:3000/solver?tiles=RILLEPVPIEUOOONU",
                    "_screenshot": "gameserver1.png",
                    "_github": "https://github.com/jmoyse/boggle-solver-microservice"
                },
                {
                    "description": "\n              Bittorrent client written in ruby\n           ",
                    "techs": {
                        "tech": [{
                                "_name": "Ruby",
                                "_icon": "ruby"
                            },
                            {
                                "_name": "Sockets",
                                "_icon": "sockets"
                            }
                        ]
                    },
                    "_name": "Bittorrent Client",
                    "_url": "",
                    "_screenshot": "btclient.png",
                    "_github": "https://github.com/jmoyse/btclient-ruby",
                    "__text": ">\n           \n\n           \n\n       "
                },
                {
                    "description": "\n              Microservice that efficiently solves a board of any given size using a Trie and depth-first traversal of the gameboard. Returns results in JSON.\n           ",
                    "techs": {
                        "tech": [{
                                "_name": "Node.js",
                                "_icon": "cplusplus"
                            },
                            {
                                "_name": "Express",
                                "_icon": "csharp"
                            },
                            {
                                "_name": "Typescript",
                                "_icon": "csharp"
                            },
                            {
                                "_name": "JSON",
                                "_icon": "WebSockets"
                            },
                            {
                                "_name": "Docker",
                                "_icon": "Docker"
                            }
                        ]
                    },
                    "_name": "Boggle Solver Microservice",
                    "_url": "https://julianmoyse.com:3000/solver?tiles=RILLEPVPIEUOOONU",
                    "_screenshot": "solver2.png",
                    "_github": "https://github.com/jmoyse/boggle-solver-microservice"
                },
                {
                    "description": "\n           Music player application written to match the basic look and feel of standard three-panel MP3 player applications. Functionality similar to XMMS, Foobar200 and WinAmp. The application is designed to be lightweight with a small memory.\n\n           Written in Mono and C#, allowing the application to run on variety of different systems provided the system has access to GTK, GTK-Sharp and LibGstreamer. Supports adding songs from local folders, creating playlists and standard playing functions.\n\n           Runs of Linux, Unix, Mac OSX and Windows\n\n           ",
                    "techs": {
                        "tech": [{
                                "_name": "Mono",
                                "_icon": ""
                            },
                            {
                                "_name": "C#",
                                "_icon": ""
                            },
                            {
                                "_name": "GTK",
                                "_icon": ""
                            },
                            {
                                "_name": "Lib G-Streamer",
                                "_icon": ""
                            },
                            {
                                "_name": "Linux",
                                "_icon": ""
                            }
                        ],
                        "__text": "\n               \n\n               \n\n               \n\n               \n\n               \n>\n           "
                    },
                    "_name": "XMMS-like MP3 Player",
                    "_url": "",
                    "_screenshot": "mp3player-screenshot.png",
                    "_github": "https://github.com/jmoyse/mono-mp3player"
                },
                {
                    "description": "\n              Small, touch enabled on screen keyboard for tablets. Requires Mono,\n           ",
                    "techs": {
                        "tech": [{
                                "_name": "Mono",
                                "_icon": ""
                            },
                            {
                                "_name": "C#",
                                "_icon": ""
                            },
                            {
                                "_name": "GTK",
                                "_icon": ""
                            },
                            {
                                "_name": "Linux",
                                "_icon": ""
                            }
                        ],
                        "__text": "\n               \n\n               \n\n               \n\n               \n>\n           "
                    },
                    "_name": "Tablet Touch Keyboard",
                    "_url": "",
                    "_screenshot": "keyboard-small.png",
                    "_github": ""
                }
            ]
        },
        "education": {
            "school": [{
                    "_name": "University of Maryland",
                    "_degree": "BS. Computer Science",
                    "_location": "College Park, MD"
                },
                {
                    "_name": "Howard Community College",
                    "_degree": "AS. Mathematics",
                    "_location": "Columbia, MD"
                },
                {
                    "_name": "Howard Community College",
                    "_degree": "AS. Computer Science",
                    "_location": "Columbia, MD"
                }
            ]
        },
        "skills": {
            "skill": [{
                    "_name": "C#/.NET",
                    "_icon": "dotnet.png",
                    "_score": "90"
                },
                {
                    "_name": "Java",
                    "_icon": "java.png",
                    "_score": "60"
                },
                {
                    "_name": "C++",
                    "_icon": "cplusplus.png",
                    "_score": "60"
                },
                {
                    "_name": "Javascript",
                    "_icon": "javascript.png",
                    "_score": "90"
                },
                {
                    "_name": "Typescript",
                    "_icon": "typescript.png",
                    "_score": "90"
                },
                {
                    "_name": "React",
                    "_icon": "react.png",
                    "_score": "80"
                },
                {
                    "_name": "Redux",
                    "_icon": "redux.png",
                    "_score": "80"
                },
                {
                    "_name": "Node.JS",
                    "_icon": "nodejs.png",
                    "_score": "90"
                },
                {
                    "_name": "Python",
                    "_icon": "python.png",
                    "_score": "65"
                },
                {
                    "_name": "PostreSQL",
                    "_icon": "postgres.png",
                    "_score": "92"
                },
                {
                    "_name": "MongoDB",
                    "_icon": "mongodb.png",
                    "_score": "80"
                },
                {
                    "_name": "MySQL",
                    "_icon": "mysql.png",
                    "_score": "85"
                }
            ]
        }
    }
}